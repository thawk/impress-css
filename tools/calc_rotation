#!/usr/bin/env python3
# vim: set fileencoding=utf-8 tabstop=4 expandtab shiftwidth=4 softtabstop=4:

# Imports
import argparse
import codecs
import logging
import numpy as np
import quaternion
from math import *

VERSION=u'20220118'

def rotate_vector(x, y, angle):
    q = quaternion.from_rotation_vector([0, 0, angle*pi/180])
    x1, y1, _ = quaternion.rotate_vectors(q, (x, y, 0))
    return x1, y1


def rotate_slide(width, height, angle):
    dx, dy = rotate_vector(width/2, height/2, -angle)

    if angle > 0:
        x = width/2 + dx
        y = height/2 - dy
    else:
        x = width/2 + dx
        y = height/2 + dy

    return x, y, angle

def main(**args):
    width = eval(args['width'][0])
    height = eval(args['height'][0])
    angle = eval(args['angle'][0])

    x, y, angle = rotate_slide(width, height, angle)
    print(f'data-rel-rotate-z="{angle}" data-rel-x="{x:.2f}" data-rel-y="{y:.2f}"')


if __name__ == '__main__':
    parser = argparse.ArgumentParser(
        description=u'''\
Calculate rotation or vector by degree angle''')

    parser.add_argument('-v', '--verbose', action='count', dest='verbose', help=u'Be moderatery verbose')
    parser.add_argument('-q', '--quiet', action='store_true', dest='quiet', default=False, help=u'Only show warning and errors')
    parser.add_argument('width', nargs=1, help=u'width of slide')
    parser.add_argument('height', nargs=1, help=u'height of slide')
    parser.add_argument('angle', nargs=1, help=u'Degree angle (clockwise)')

    args = parser.parse_args()

    if not args.verbose:
        args.verbose = 0

    # 日志初始化
    log_format = u'%(asctime)s %(levelname)s %(message)s'

    if args.quiet:
        logging.basicConfig(level=logging.WARNING, format=log_format)
    elif args.verbose > 0:
        logging.basicConfig(level=logging.DEBUG, format=log_format)
    else:
        logging.basicConfig(level=logging.INFO, format=log_format)

    main(**vars(args))

